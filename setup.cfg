# Packaging Information
# =====================
#
# This is the Planetary Data System's template for packaging information of
# Python packages. After making a copy of the template repository, go through
# this file *carefully* and fill in sections, change settings, etc., as
# needed for your particular project. Look for the ``TODO`` indicators as
# well as the comments sprinkled throughout, and replace obvious strings
# like ``your_pckage_name`` and ``A short descriptionâ€¦``.
#
#
# Metadata
# --------
#
# Fill in your package metadata here in order to give "window shoppers"
# information about the package, whether they can use it and should use
# it, and how to get it.

[metadata]
name = pds-web-analytics
author = PDS
author_email = pds_operator@jpl.nasa.gov
description = PDS Web Analytics - Log processing and S3 synchronization for Planetary Data System
long_description = file: README.md
long_description_content_type = text/markdown
version = file: src/pds/web_analytics/VERSION.txt
license = apache-2.0
keywords = pds, planetary data, web analytics, logstash, s3, aws
url = https://github.com/NASA-PDS/web-analytics
download_url = https://github.com/NASA-PDS/web-analytics/releases/
classifiers =
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.13
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent


# Options
# -------
#
# The options here describe the morphology of the package, such as the
# packages it depends on, namespaces, and so forth.

[options]
install_requires =
    python-box~=7.3
    pyyaml~=6.0
    boto3~=1.35.10

# Change this to False if you use things like __file__ or __path__â€”which you
# shouldn't use anyway, because that's what ``pkg_resources`` is for ðŸ™‚
zip_safe = True
include_package_data = True
namespace_packages = pds
# base directory for code is in src/. Don't change this.
package_dir =
    = src
packages = find_namespace:
python_requires = >= 3.13

[options.extras_require]
dev =
    black               ~= 23.7.0
    docutils            ~= 0.21    # Newer and therefore better but not so new as to make sphinx-argparse upset
    sphinx              ~= 8.2.3   # Documentation generation
    sphinx-rtd-theme    == 3.0.2   # Documentation theme
    mypy-zope           == 1.0.13  # Type stubs for zope.interface
    lxml-stubs          == 0.5.1   # Type stubs for lxml, duh
    flake8              == 7.3.0   # Unquestioning adherence to coding stylees
    flake8-bugbear      == 24.12.12
    flake8-docstrings   == 1.7.0   # And check the docstrings too
    pep8-naming         == 0.12.1  # And even your function and variable names
    mypy                ~= 1.10.0  # Do your type annotations actually work?
    pydocstyle          == 6.1.1   # Do your docstrings look like everyone else's?
    coverage            == 5.5     # Does all your code get exercised?
    pytest              == 6.2.5   # Testing
    pytest-cov          == 5.0.0   # pytest + coverage = pytest-cov
    pytest-watch        == 4.2.0   # Automatic testing every time you save a file
    pytest-xdist        == 2.4.0   # You got multiple cores, right?
    pre-commit          == 2.15.0  # Auto-run checks on every commit
    tox                 ~= 4.11.0  # A way to automate and standardize testing in Python
    types-requests      ~= 2.31.0.20240218

[options.entry_points]
# Put your entry point scripts here
console_scripts =
    s3-log-sync = pds.web_analytics.s3_sync:main

[options.packages.find]
# Don't change this. Needed to find packages under src/
where = src


# Coverage Testing
# ----------------
#
# The ``coverage`` tool helps ensure that all parts of your code is actually
# used. The settings here tell what files we can skip. Feel free to adjust
# this.
#
# See https://coverage.readthedocs.io/ for more.
[coverage:run]
omit = */_version.py,*/__init__.py


# Test Options
# ------------
#
# Generic unit, functional, integration, acceptance, etc., testing goes here.
# Right now it's blank.
[test]
# (Blank for now.)


# Pytest
# ------
#
# Pytest is the modern way to run all sorts of tests in code. It works with
# the ``unittest`` module in the Python Standard Library and also offers its
# own shortcuts to simplifying writing and running tests.
#
# See https://docs.pytest.org/ for more information.
[tool:pytest]
addopts = -n auto --cov=pds -v


# Installation Options
# --------------------
#
# Any custom options needed to install this package go here. Right now it's
# blank.
[install]
# (Blank for now.)


# Flake8
# ------
#
# Flake8 (pronounced "flay-kate") is a Python style guide tool. It checks your
# code against a library of "best practices" for writing Python and lets you
# know when things aren't quite the "best". There are numerous options below
# and you can read more about the tool at https://flake8.pycqa.org/
[flake8]
max-line-length = 120
extend-exclude = docs,tests,setup.py,requirements
docstring_convention = google

# Ignoring:
# E203 prevents flake8 from complaining about whitespace around slice
# components. Black formats per PEP8 and flake8 doesn't like some of
# this.
#
# E501 prevents flake8 from complaining line lengths > 79. We will use
# flake8-bugbear's B950 to handle line length lint errors. This trips
# when a line is > max-line-length + 10%.
#
# E503 ignores line breaks before binary operators because the opposite advice is soon to become the best
# practice; see https://www.flake8rules.com/rules/W503.html
extend-ignore = E203, E501, W503

# Selects following test categories:
# D: Docstring errors and warnings
# E, W: PEP8 errors and warnings
# F: PyFlakes codes
# N: PEP8 Naming plugin codes
# B: flake8-bugbear codes
# B***: Specific flake8-bugbear opinionated warnings to trigger
#   B902: Invalid first argument used for method. Use self for instance
#       methods, and cls for class methods
#   B903: Use collections.namedtuple (or typing.NamedTuple) for data classes
#       that only set attributes in an __init__ method, and do nothing else.
#   B950: Line too long. This is a pragmatic equivalent of pycodestyle's
#       E501: it considers "max-line-length" but only triggers when the value
#       has been exceeded by more than 10%.
select = D,E,F,N,W,B,B902,B903,B950


# mypy
# ----
#
# ``mypy`` checks your use of type annotations in modern Python code, similar
# to compile-time type checking in statically typed languages. This helps
# detect errors early instead of at run-time where they're much harder to
# debug.
#
# For more information about ``mypy``, see: https://mypy.readthedocs.io/

[mypy]
# The generic ``mypy`` settings are blank for now, but there are more specific
# options below. Note that the section syntax for ``mypy`` includes
# glob-style wildcards to match file patterns.
